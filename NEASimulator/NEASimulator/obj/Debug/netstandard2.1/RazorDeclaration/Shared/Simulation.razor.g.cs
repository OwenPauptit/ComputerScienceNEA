#pragma checksum "C:\Users\owenp\source\repos\NEASimulator\NEASimulator\Shared\Simulation.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "95250701343fff4be3dbb127fb6731b270d94214"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace NEASimulator.Shared
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\owenp\source\repos\NEASimulator\NEASimulator\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\owenp\source\repos\NEASimulator\NEASimulator\_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\owenp\source\repos\NEASimulator\NEASimulator\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\owenp\source\repos\NEASimulator\NEASimulator\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\owenp\source\repos\NEASimulator\NEASimulator\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\owenp\source\repos\NEASimulator\NEASimulator\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\owenp\source\repos\NEASimulator\NEASimulator\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\owenp\source\repos\NEASimulator\NEASimulator\_Imports.razor"
using NEASimulator;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\owenp\source\repos\NEASimulator\NEASimulator\_Imports.razor"
using NEASimulator.Shared;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/Simulation")]
    public partial class Simulation : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 95 "C:\Users\owenp\source\repos\NEASimulator\NEASimulator\Shared\Simulation.razor"
       

    private List<Models.AvailableApparatus> available = new List<Models.AvailableApparatus>();

    private Models.SaveState currentState = new Models.SaveState();
    private Models.SaveState savedState = new Models.SaveState();

    private bool paused = false;

    private float accumulator = 0f;
    private System.Diagnostics.Stopwatch stopwatch;


    private void AddObject(MouseEventArgs e, string type)
    {
        NEASimulator.Interfaces.IDisplayObject obj;
        switch (type.ToUpper())
        {
            case "BALL":
                obj = new NEASimulator.Models.Apparatus.Ball(new System.Numerics.Vector2 { X = (float)e.ClientX, Y = (float)e.ClientY }, paused);
                break;
            case "PLANK":
                obj = new NEASimulator.Models.Apparatus.Plank(new System.Numerics.Vector2 { X = (float)e.ClientX, Y = (float)e.ClientY }, Models.Apparatus.Plank.Type.Horizontal);
                break;
            case "VPLANK":
                obj = new NEASimulator.Models.Apparatus.Plank(new System.Numerics.Vector2 { X = (float)e.ClientX, Y = (float)e.ClientY }, Models.Apparatus.Plank.Type.Vertical);
                break;
            case "METRESTICK":
                obj = new NEASimulator.Models.Apparatus.MetreStick(new System.Numerics.Vector2 { X = (float)e.ClientX, Y = (float)e.ClientY });
                break;
            default:
                obj = null;
                break;
        }
        currentState.Objects.Add(obj);
    }

    private void Clear()
    {
        currentState.Objects.Clear();
    }

    private void Reset()
    {
        Clear();
        currentState = new Models.SaveState(savedState);
        this.StateHasChanged();
    }

    private void Save()
    {
        savedState = new Models.SaveState(currentState);
    }

    private void PlayPause()
    {
        paused = !paused;
        if (!paused)
        {
            stopwatch.Restart();
        }
    }

    [JSInvokable("Rerender")]
    public void Rerender()
    {
        if (stopwatch.IsRunning)
        {
            stopwatch.Stop();
        }
        if (!paused)
        {
            float seconds = stopwatch.ElapsedMilliseconds / 1000;
            stopwatch.Reset();
            stopwatch.Start();
            accumulator += seconds;
            if (accumulator > 5 * Models.Constants.dt)
            {
                accumulator = 5 * Models.Constants.dt;
            }
            while (accumulator > Models.Constants.dt)
            {
                accumulator -= Models.Constants.dt;
                UpdatePhysics();
            }
            UpdatePhysics();
            this.StateHasChanged();
        }
    }

    private void UpdatePhysics()
    {
        for (int i = 0; i < currentState.Objects.Count; i++)
        {
            if (currentState.Objects[i] is NEASimulator.Interfaces.IDynamic)
            {

                for (int k = 0; k < currentState.Objects.Count; k++)
                {
                    if (i != k && currentState.Objects[k] is NEASimulator.Interfaces.IPhysical)
                    {
                        var obj1 = (currentState.Objects[i] as NEASimulator.Interfaces.IPhysical);
                        var obj2 = (currentState.Objects[k] as NEASimulator.Interfaces.IPhysical);
                        NEASimulator.Models.Collisions.CheckCollision(ref obj1, ref obj2);
                        currentState.Objects[i] = obj1;
                        currentState.Objects[k] = obj2;
                    }

                }
                (currentState.Objects[i] as NEASimulator.Interfaces.IDynamic).CalculateAVP();
            }
        }
        UpdateDataLoggers();

    }

    private void UpdateDataLoggers()
    {
        for (int i = 0; i < currentState.Edges.Count(); i++)
        {

            for (int k = 0; k < currentState.Objects.Count; k++)
            {
                if (currentState.Objects[k] is NEASimulator.Interfaces.IDynamic)
                {
                    // Don't need to pass as references as objects wont be modified
                    if (NEASimulator.Models.Collisions.CheckCollision(currentState.Edges[i].sensor, (currentState.Objects[k] as NEASimulator.Interfaces.IDynamic)))
                    {
                        currentState.Edges[i].sensor.CollectData(currentState.Objects[k] as NEASimulator.Interfaces.IDynamic);
                    }
                }
            }

            if (currentState.Edges[i].sensor.HasData())
            {
                currentState.Edges[i].datalogger.ReceiveData(currentState.Edges[i].portnum, currentState.Edges[i].sensor.ReturnData());

                this.StateHasChanged();

            }
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            var dotNetReference = DotNetObjectReference.Create(this);
            JSRuntime.InvokeVoidAsync("jsTimer", dotNetReference);

            stopwatch = System.Diagnostics.Stopwatch.StartNew();

            currentState.Sensors.Add(new NEASimulator.Models.Apparatus.LightGate(new System.Numerics.Vector2(300, 300), false));
            currentState.Sensors.Add(new NEASimulator.Models.Apparatus.LightGate(new System.Numerics.Vector2(500, 300), false));

            currentState.DataLoggers.Add(new Models.Apparatus.DataLogger(new System.Numerics.Vector2(400, 500), false));

            currentState.Edges.Add(new Models.Edge() { datalogger = currentState.DataLoggers[0], sensor = currentState.Sensors[0], portnum = 0 });
            currentState.Edges.Add(new Models.Edge() { datalogger = currentState.DataLoggers[0], sensor = currentState.Sensors[1], portnum = 1 });

        }
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
    }
}
#pragma warning restore 1591
