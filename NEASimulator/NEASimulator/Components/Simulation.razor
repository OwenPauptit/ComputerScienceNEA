
@inject IJSRuntime JSRuntime;

<style>
    .draggable {
        cursor: pointer
    }

    .datalogger {
        width: max-content;
        background: #fdc689;
        border: 3px solid #f5a44c;
        border-radius: 15px;
        padding: 10px 10px 10px 10px;
    }

        .datalogger button {
            position: absolute;
            margin-left: -60px;
            font-family: Consolas, Arial;
        }

        .datalogger.inner {
            background: #3cb878;
            border: 2px solid #464646;
            border-radius: 0px;
            padding: 0px 10px 0px 0px;
        }

    ul {
        list-style: none;
        padding-left: 10px;
        font-family: Consolas, Arial;
    }

    .buttons {
        position: fixed;
        left: 15%;
        bottom: 20px;
    }
</style>



<div>
    <div class="buttons">
        <!--<button @onclick="@((args) => AddObject(args,"Ball"))">Add Ball</button>
        <button @onclick="@((args) => AddObject(args,"Plank"))">Add Plank</button>
        <button @onclick="@((args) => AddObject(args,"VPlank"))">Add VPlank</button>
        <button @onclick="@((args) => AddObject(args,"MetreStick"))">Add MetreStick</button>-->

        <button @onclick="PlayPause">@(paused?"Play":"Pause")</button>
        <button @onclick="Clear">Clear</button>
        <button @onclick="Save">Save Current State</button>
        <button @onclick="Reset">Return To Saved State</button>
    </div>

    <br />

    @foreach (var edge in currentState.Edges)
    {
        <svg height="1000" width="2000" style="position: absolute; left: 0; top: 0; z-index: -1">
            <line x1="@(edge.datalogger.Position.X)"
                  y1="@(edge.datalogger.Position.Y)"
                  x2="@(edge.sensor.Position.X)"
                  y2="@(edge.sensor.Position.Y)"
                  stroke="Black"></line>
        </svg>
    }
    @foreach (var obj in currentState.Objects)
    {

        if (obj is NEASimulator.Models.Draggable)
        {
            <img class="draggable"
                 src="@obj.ImageSrc"
                 @onclick="@((obj as NEASimulator.Models.Draggable).OnClick)"
                 @onmousemove="@((obj as NEASimulator.Models.Draggable).SetPositionToMouse)"
                 style="position:absolute; @obj.Style_Position" />
        }
        else
        {
            <img class="draggable"
                 src="@obj.ImageSrc"
                 style="position:absolute; @obj.Style_Position" />
        }

    }
    @foreach (var sensor in currentState.Sensors)
    {
        <img class="draggable"
             src="@sensor.ImageSrc"
             @onclick="@((args) => SensorClick(sensor))"
             @onmousemove="@((sensor as NEASimulator.Models.Draggable).SetPositionToMouse)"
             style="position:absolute; @sensor.Style_Position" />
    }
    @foreach (var logger in currentState.DataLoggers)
    {
        var displaydata = logger.GetDisplayData();

        <div @onclick="@((logger as NEASimulator.Models.Draggable).OnClick)"
             @onmousemove="@((logger as NEASimulator.Models.Draggable).SetPositionToMouse)"
             style="position:absolute; @logger.Style_Position"
             class="datalogger">

            @if (currentState.Edges.Where(e => e.datalogger == logger && e.portnum == 0).Count() == 0)
            {
                <button style="margin-top: 10px;" @onclick="@((args) => MakeEdge(logger, 0))">+ A</button>
            }
            @if (currentState.Edges.Where(e => e.datalogger == logger && e.portnum == 1).Count() == 0)
            {
                <button style="margin-top: 60px;" @onclick="@((args) => MakeEdge(logger, 1))">+ B</button>
            }


            <div class="datalogger inner">
                <ul>
                    <li></li>
                    <li>Velocity at A:            @(((float)displaydata.VelocityA).ToString("0.0000"))</li>
                    <li>Velocity at B:            @(((float)displaydata.VelocityB).ToString("0.0000"))</li>
                    <li>Time from A to B:         @(((float)displaydata.TimeDifference).ToString("0.0000"))</li>
                    <li>Acceleration from A to B: @(((float)displaydata.Acceleration).ToString("0.0000"))</li>
                </ul>
            </div>
        </div>
    }
</div>

@code {

    [Parameter]
    public Models.SaveState Preset { get; set; }

    private List<Models.AvailableApparatus> available = new List<Models.AvailableApparatus>();

    private Models.SaveState currentState = new Models.SaveState();
    private Models.SaveState savedState = new Models.SaveState();

    private bool paused = false;
    private bool makingEdge = false;
    private Models.Apparatus.DataLogger dataloggerToConnect;
    private int portToConnect;

    private float accumulator = 0f;
    private System.Diagnostics.Stopwatch stopwatch;

    private void MakeEdge(Models.Apparatus.DataLogger logger, int port)
    {
        makingEdge = true;
        dataloggerToConnect = logger;
        portToConnect = port;
        logger.OnClick();
    }

    private void SensorClick(Interfaces.ISensor sensor)
    {
        if (makingEdge)
        {
            currentState.Edges.Add(new Models.Edge() { datalogger = dataloggerToConnect, sensor = sensor, portnum = portToConnect });
            makingEdge = false;
        }
        else
        {
            if (sensor is Models.Draggable)
            {
                (sensor as Models.Draggable).OnClick();
            }
        }
    }

    public void AddObject(MouseEventArgs e, string type)
    {
        NEASimulator.Interfaces.IDisplayObject obj;
        switch (type.ToUpper())
        {
            case "DATALOGGER":
                currentState.DataLoggers.Add(new Models.Apparatus.DataLogger(new System.Numerics.Vector2 { X = (float)e.ClientX, Y = (float)e.ClientY }));
                return;
            case "LIGHTGATE":
                currentState.Sensors.Add(new Models.Apparatus.LightGate(new System.Numerics.Vector2 { X = (float)e.ClientX, Y = (float)e.ClientY }));
                return;
            case "BALL":
                obj = new NEASimulator.Models.Apparatus.Ball(new System.Numerics.Vector2 { X = (float)e.ClientX, Y = (float)e.ClientY }, paused);
                break;
            case "PLANK":
                obj = new NEASimulator.Models.Apparatus.Plank(new System.Numerics.Vector2 { X = (float)e.ClientX, Y = (float)e.ClientY }, Models.Apparatus.Plank.Type.Horizontal);
                break;
            case "VPLANK":
                obj = new NEASimulator.Models.Apparatus.Plank(new System.Numerics.Vector2 { X = (float)e.ClientX, Y = (float)e.ClientY }, Models.Apparatus.Plank.Type.Vertical);
                break;
            case "METRESTICK":
                obj = new NEASimulator.Models.Apparatus.MetreStick(new System.Numerics.Vector2 { X = (float)e.ClientX, Y = (float)e.ClientY });
                break;
            default:
                obj = null;
                break;
        }
        currentState.Objects.Add(obj);

    }

    private void Clear()
    {
        currentState = new Models.SaveState();
    }

    private void Reset()
    {
        Clear();
        currentState = new Models.SaveState(savedState);
        this.StateHasChanged();
    }

    private void Save()
    {
        savedState = new Models.SaveState(currentState);
    }

    private void PlayPause()
    {
        paused = !paused;
        if (!paused)
        {
            stopwatch.Restart();
        }
    }

    [JSInvokable("Rerender")]
    public void Rerender()
    {
        if (stopwatch.IsRunning)
        {
            stopwatch.Stop();
        }
        if (!paused)
        {
            float seconds = stopwatch.ElapsedMilliseconds / 1000;
            stopwatch.Reset();
            stopwatch.Start();
            accumulator += seconds;
            if (accumulator > 5 * Models.Constants.dt)
            {
                accumulator = 5 * Models.Constants.dt;
            }
            while (accumulator > Models.Constants.dt)
            {
                accumulator -= Models.Constants.dt;
                UpdatePhysics();
            }
            UpdatePhysics();
        }
        this.StateHasChanged();
    }

    private void UpdatePhysics()
    {
        for (int i = 0; i < currentState.Objects.Count; i++)
        {
            if (currentState.Objects[i] is NEASimulator.Interfaces.IDynamic)
            {

                for (int k = 0; k < currentState.Objects.Count; k++)
                {
                    if (i != k && currentState.Objects[k] is NEASimulator.Interfaces.IPhysical)
                    {
                        var obj1 = (currentState.Objects[i] as NEASimulator.Interfaces.IPhysical);
                        var obj2 = (currentState.Objects[k] as NEASimulator.Interfaces.IPhysical);
                        NEASimulator.Models.Collisions.CheckCollision(ref obj1, ref obj2);
                        currentState.Objects[i] = obj1;
                        currentState.Objects[k] = obj2;
                    }

                }
                (currentState.Objects[i] as NEASimulator.Interfaces.IDynamic).CalculateAVP();
            }
        }
        UpdateDataLoggers();

    }

    private void UpdateDataLoggers()
    {
        for (int i = 0; i < currentState.Edges.Count(); i++)
        {

            for (int k = 0; k < currentState.Objects.Count; k++)
            {
                if (currentState.Objects[k] is NEASimulator.Interfaces.IDynamic)
                {
                    // Don't need to pass as references as objects wont be modified
                    if (NEASimulator.Models.Collisions.CheckCollision(currentState.Edges[i].sensor, (currentState.Objects[k] as NEASimulator.Interfaces.IDynamic)))
                    {
                        currentState.Edges[i].sensor.CollectData(currentState.Objects[k] as NEASimulator.Interfaces.IDynamic);
                    }
                }
            }

            if (currentState.Edges[i].sensor.HasData())
            {
                currentState.Edges[i].datalogger.ReceiveData(currentState.Edges[i].portnum, currentState.Edges[i].sensor.ReturnData());

                this.StateHasChanged();

            }
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            var dotNetReference = DotNetObjectReference.Create(this);
            JSRuntime.InvokeVoidAsync("jsTimer", dotNetReference);

            stopwatch = System.Diagnostics.Stopwatch.StartNew();

            currentState = Preset;

            Save();

            paused = true;
        }
    }
}

