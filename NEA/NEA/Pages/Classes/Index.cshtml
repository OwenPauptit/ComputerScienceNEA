@page

@model NEA.Pages.Classes.IndexModel

@{
    ViewData["Title"] = "Classes";
    Layout = "~/Pages/Shared/_Layout.cshtml";
}

<h1>Classes</h1>

@if ((await AuthorizationService.AuthorizeAsync(
User,
new Classroom { UserID = UserManager.GetUserId(User) },
Operations.CreateClass)).Succeeded)
{
    <p>
        <a asp-page="Create">Create New</a>
    </p>
}
else if ((await AuthorizationService.AuthorizeAsync(
User,
new Classroom { ClassroomID = "-1" },
Operations.Enroll)).Succeeded)
{
    <p>
        <a asp-page="/Enrollments/Create">Enroll in new class</a>
    </p>
}

<div>
    @foreach (var item in Model.ClassroomData.Classrooms)
    {
        var selected = (item.ClassroomID == Model.ClassID) ? "bg-blue" : "bg-brown";
        <div class="classroom @selected">
            <a asp-page="./Index" asp-route-classId="@item.ClassroomID">
                @item.Name
            </a>
            <div>
                @if (User.IsInRole(Authorization.Constants.StudentRole))
                {
                    <p>Teacher: @item.Teacher.LastName</p>
                }
                else
                {
                    <p>@item.Enrollments.Count() Students</p>
                }
                <ul>
                    @if ((await AuthorizationService.AuthorizeAsync(User, item, Operations.EditClass)).Succeeded)
                    {
                        <li><a asp-page="./Edit" asp-route-id="@item.ClassroomID">Edit</a> | </li>
                    }

                    <li><a asp-page="./Details" asp-route-id="@item.ClassroomID">Details</a></li>

                    @if ((await AuthorizationService.AuthorizeAsync(User, item, Operations.DeleteClass)).Succeeded)
                    {

                        <li> | <a asp-page="./Delete" asp-route-id="@item.ClassroomID">Delete</a></li>
                    }
                </ul>
            </div>
        </div>
    }
</div>

<!--<table class="table">
    <thead>
        <tr>
            <th>Class Name</th>
            @if (User.IsInRole(Authorization.Constants.StudentRole))
            {
                <th>Teacher</th>
            }
            else
            {
                <th>Number of Students</th>
            }
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.ClassroomData.Classrooms)
        {
            var selectedRow = "";
            if (item.ClassroomID == Model.ClassID)
            {
                selectedRow = "table-success";
            }

            <tr class="@selectedRow">
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                @if (User.IsInRole(Authorization.Constants.StudentRole))
                {
                    <td>
                        @Html.DisplayFor(modelItem => item.Teacher.LastName)
                    </td>
                }
                else
                {
                    <td>
                        @item.Enrollments.Count()
                    </td>
                }
                <td>
                    <a asp-page="./Index" asp-route-classId="@item.ClassroomID">Select</a> |

                    @if ((await AuthorizationService.AuthorizeAsync(User, item, Operations.EditClass)).Succeeded)
                    {
                        <a asp-page="./Edit" asp-route-id="@item.ClassroomID">Edit</a>
                        <text> | </text>
                    }

                    <a asp-page="./Details" asp-route-id="@item.ClassroomID">Details</a>

                    @if ((await AuthorizationService.AuthorizeAsync(User, item, Operations.DeleteClass)).Succeeded)
                    {

                        <text> | </text>
                        <a asp-page="./Delete" asp-route-id="@item.ClassroomID">Delete</a>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>-->

@if (Model.ClassroomData.ClassAssignments != null)
{
    <h3>Assignments from selected class</h3>

    @if ((await AuthorizationService.AuthorizeAsync(User,
new ClassAssignment { ClassroomID = Model.ClassID },
Operations.CreateAssignment)).Succeeded)
    {
        <p>
            <a asp-page="/Assignments/Create" asp-route-classId="@Model.ClassID">Create New</a>
        </p>
    }

    @foreach (var item in Model.ClassroomData.ClassAssignments)
    {

        var selected = item.SimulationID == Model.SimulatorID ? "bg-blue" : "bg-brown";

        <div class="assignment @selected">
            <div>
                <a asp-page="./Index"
                   asp-route-classId="@item.ClassroomID"
                   asp-route-simId="@item.SimulationID">@item.Simulation.Name</a>
                <text>Date Set: @Html.DisplayFor(modelItem => item.DateSet)</text>
                <text>Date Due: @Html.DisplayFor(modelItem => item.DateDue)</text>
                <ul>
                    @if ((await AuthorizationService.AuthorizeAsync(User, item, Operations.EditAssignment)).Succeeded)
                    {
                        <li>
                            <a asp-page="/Assignments/Edit"
                               asp-route-classId="@item.ClassroomID"
                               asp-route-simId="@item.SimulationID">Edit</a> |
                        </li>
                    }

                    <li>
                        <a asp-page="/Assignments/Details"
                           asp-route-classId="@item.ClassroomID"
                           asp-route-simId="@item.SimulationID">Details</a>
                    </li>

                    @if ((await AuthorizationService.AuthorizeAsync(User, item, Operations.DeleteAssignment)).Succeeded)
                    {

                        <li>
                            |
                            <a asp-page="/Assignments/Delete"
                               asp-route-classId="@item.ClassroomID"
                               asp-route-simId="@item.SimulationID">Delete</a>
                        </li>
                    }
                </ul>
            </div>
        </div>

        <br />
    }

    <!--<table class="table">
        <tr>
            <th></th>
            <th>Simulation Name</th>
            <th>Date Set</th>
            <th>Date Due</th>
        </tr>

        @foreach (var item in Model.ClassroomData.ClassAssignments)
        {
            var selectedRow = "";
            if (item.SimulationID == Model.SimulatorID)
            {
                selectedRow = "table-success";
            }
            <tr class="@selectedRow">
                <td>
                    <a asp-page="./Index"
                       asp-route-classId="@item.ClassroomID"
                       asp-route-simId="@item.SimulationID">Select</a> |

                    @if ((await AuthorizationService.AuthorizeAsync(User, item, Operations.EditAssignment)).Succeeded)
                    {
                        <a asp-page="/Assignments/Edit"
                           asp-route-classId="@item.ClassroomID"
                           asp-route-simId="@item.SimulationID">Edit</a>
                        <text> | </text>
                    }

                    <a asp-page="/Assignments/Details"
                       asp-route-classId="@item.ClassroomID"
                       asp-route-simId="@item.SimulationID">Details</a>

                    @if ((await AuthorizationService.AuthorizeAsync(User, item, Operations.DeleteAssignment)).Succeeded)
                    {

                        <text> | </text>
                        <a asp-page="/Assignments/Delete"
                           asp-route-classId="@item.ClassroomID"
                           asp-route-simId="@item.SimulationID">Delete</a>
                    }
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Simulation.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.DateSet)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.DateDue)
                </td>
            </tr>
        }
    </table>-->
}

@if (Model.ClassroomData.StudentAssignments != null)
{
    <br />
    <br />
    @if (User.IsInRole(Authorization.Constants.StudentRole))
    {
        <h3>Your data for selected assignment</h3>
    }
    else
    {
        <h3>Student data for selected assignment</h3>
    }
    <a asp-page="./Index"
       asp-route-classId="@Model.ClassID"
       asp-route-simId="@Model.SimulatorID"
       asp-route-showDetails="@true">Show answers to each question</a>

    <table class="table">
        <tr>
            @if (User.IsInRole(Authorization.Constants.TeacherRole))
            {
                <th>Name</th>
            }
            <th>Percentage</th>
            <th>Date Completed</th>
            @if ((await AuthorizationService.AuthorizeAsync
 (User,
 new StudentAssignment { UserID = UserManager.GetUserId(User) },
 Operations.CompleteAssignment)).Succeeded)
            {
                <th></th>
            }
        </tr>

        @foreach (var item in Model.ClassroomData.StudentAssignments)
        {
            <tr>
                @if (User.IsInRole(Authorization.Constants.TeacherRole))
                {
                    <td>
                        @Html.DisplayFor(modelItem => item.StudentName)
                    </td>
                }
                <td>
                    @Html.DisplayFor(modelItem => item.Percentage)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.DateCompleted)
                </td>
                @if ((await AuthorizationService.AuthorizeAsync
(User,
new StudentAssignment { UserID = UserManager.GetUserId(User) },
Operations.CompleteAssignment)).Succeeded)
                {
                    <td>
                        <a asp-page="/Simulations"
                           asp-route-id="@item.SimulationID">
                            Complete Assignment Now
                        </a>
                    </td>
                }
            </tr>
        }
    </table>
}

@if (Model.ShowDetails)
{
    <br />
    <br />

    <h3>Student Question Data</h3>

    <table>
        <thead>
            <tr>
                <th>
                    Key:
                </th>
            </tr>
        </thead>
        <tbody>
            <tr class="table-success">
                <td>
                    Question was answered correctly
                </td>
            </tr>
            <tr class="table-danger">
                <td>
                    Question was answered incorrectly
                </td>
            </tr>
            <tr class="table-warning">
                <td>
                    Question has not been answered
                </td>
            </tr>
        </tbody>
    </table>
    <br />

    foreach (var question in Model.ClassroomData.Questions)
    {
        <label>@question.QIndex @(". ") @question.QuestionString</label>
        <br />
        <label>Correct Answer: @(question.AnswerString.Split(';')[0])</label>

        <table class="table">
            <thead>
                <tr>
                    <th>
                        Student Name
                    </th>
                    <th>
                        Answer
                    </th>
                    @if (User.IsInRole(Constants.TeacherRole))
                    {
                        <th></th>
                    }
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.ClassroomData.StudentQuestions)
                {
                    if (item.QIndex != question.QIndex)
                    {
                        continue;
                    }

                    var correct = "";
                    switch (item.isCorrect)
                    {
                        case AnswerType.Correct:
                        case AnswerType.OverriddenCorrect:
                        case AnswerType.ErrorCarriedForward:
                            correct = "table-success";
                            break;
                        case AnswerType.Incorrect:
                        case AnswerType.OverriddenIncorrect:
                            correct = "table-danger";
                            break;
                        default:
                            correct = "table-warning";
                            break;
                    }

                    <tr class="@correct">
                        <td>
                            @Html.DisplayFor(modelItem => item.StudentName)
                        </td>
                        <td>
                            @{
                                var answer = item.Answer;
                                if (item.isCorrect == AnswerType.ErrorCarriedForward)
                                {
                                    answer += " (Error Carried Forward)";
                                }
                                else if (item.isCorrect == AnswerType.OverriddenCorrect || item.isCorrect == AnswerType.OverriddenIncorrect)
                                {
                                    answer += " (Overridden by teacher)";
                                }
                            }
                            @answer
                        </td>
                        @if (User.IsInRole(Constants.TeacherRole))
                        {
                            @if (item.isCorrect != AnswerType.Unanswered)
                            {
                                <td>
                                    <form asp-page-handler="Override" asp-route-classid="@Model.ClassID" method="post">
                                        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                                        <div class="form-group invisible">
                                            <input type="hidden" asp-for="StudentQuestion.UserID" value="@item.UserId" />
                                        </div>
                                        <div class="form-group invisible">
                                            <input type="hidden" asp-for="StudentQuestion.SimulationID" value="@item.SimID" />
                                        </div>
                                        <div class="form-group invisible">
                                            <input type="hidden" asp-for="StudentQuestion.QIndex" value="@item.QIndex" />
                                        </div>
                                        <div class="form-group">
                                            <input type="submit" value="override" class="btn btn-primary" />
                                        </div>
                                    </form>
                                </td>
                            }
                            else
                            {
                                <td>
                                    <br />
                                    <br />
                                    <br />
                                </td>
                            }

                        }
                    </tr>
                }
            </tbody>
        </table>

        <br />
        <br />
    }
}

